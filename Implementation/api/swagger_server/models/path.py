# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.path_coordinates import PathCoordinates  # noqa: F401,E501
from swagger_server import util


class Path(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, path_id: int=None, average_speed: float=None, distance: float=None, image_url: str=None, title: str=None, timestamp: str=None, coordinates: List[PathCoordinates]=None):  # noqa: E501
        """Path - a model defined in Swagger

        :param path_id: The path_id of this Path.  # noqa: E501
        :type path_id: int
        :param average_speed: The average_speed of this Path.  # noqa: E501
        :type average_speed: float
        :param distance: The distance of this Path.  # noqa: E501
        :type distance: float
        :param image_url: The image_url of this Path.  # noqa: E501
        :type image_url: str
        :param title: The title of this Path.  # noqa: E501
        :type title: str
        :param timestamp: The timestamp of this Path.  # noqa: E501
        :type timestamp: str
        :param coordinates: The coordinates of this Path.  # noqa: E501
        :type coordinates: List[PathCoordinates]
        """
        self.swagger_types = {
            'path_id': int,
            'average_speed': float,
            'distance': float,
            'image_url': str,
            'title': str,
            'timestamp': str,
            'coordinates': List[PathCoordinates]
        }

        self.attribute_map = {
            'path_id': 'path_id',
            'average_speed': 'average_speed',
            'distance': 'distance',
            'image_url': 'image_url',
            'title': 'title',
            'timestamp': 'timestamp',
            'coordinates': 'coordinates'
        }

        self._path_id = path_id
        self._average_speed = average_speed
        self._distance = distance
        self._image_url = image_url
        self._title = title
        self._timestamp = timestamp
        self._coordinates = coordinates

    @classmethod
    def from_dict(cls, dikt) -> 'Path':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Path of this Path.  # noqa: E501
        :rtype: Path
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path_id(self) -> int:
        """Gets the path_id of this Path.


        :return: The path_id of this Path.
        :rtype: int
        """
        return self._path_id

    @path_id.setter
    def path_id(self, path_id: int):
        """Sets the path_id of this Path.


        :param path_id: The path_id of this Path.
        :type path_id: int
        """
        if path_id is None:
            raise ValueError("Invalid value for `path_id`, must not be `None`")  # noqa: E501

        self._path_id = path_id

    @property
    def average_speed(self) -> float:
        """Gets the average_speed of this Path.


        :return: The average_speed of this Path.
        :rtype: float
        """
        return self._average_speed

    @average_speed.setter
    def average_speed(self, average_speed: float):
        """Sets the average_speed of this Path.


        :param average_speed: The average_speed of this Path.
        :type average_speed: float
        """

        self._average_speed = average_speed

    @property
    def distance(self) -> float:
        """Gets the distance of this Path.

        Total distance along the path, in meters  # noqa: E501

        :return: The distance of this Path.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance: float):
        """Sets the distance of this Path.

        Total distance along the path, in meters  # noqa: E501

        :param distance: The distance of this Path.
        :type distance: float
        """

        self._distance = distance

    @property
    def image_url(self) -> str:
        """Gets the image_url of this Path.

        Image with the path plotted on a map.  # noqa: E501

        :return: The image_url of this Path.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this Path.

        Image with the path plotted on a map.  # noqa: E501

        :param image_url: The image_url of this Path.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def title(self) -> str:
        """Gets the title of this Path.

        Name of the path, shown to the User  # noqa: E501

        :return: The title of this Path.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Path.

        Name of the path, shown to the User  # noqa: E501

        :param title: The title of this Path.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this Path.

        Unix epoch time of the path  # noqa: E501

        :return: The timestamp of this Path.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this Path.

        Unix epoch time of the path  # noqa: E501

        :param timestamp: The timestamp of this Path.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def coordinates(self) -> List[PathCoordinates]:
        """Gets the coordinates of this Path.


        :return: The coordinates of this Path.
        :rtype: List[PathCoordinates]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates: List[PathCoordinates]):
        """Sets the coordinates of this Path.


        :param coordinates: The coordinates of this Path.
        :type coordinates: List[PathCoordinates]
        """

        self._coordinates = coordinates
